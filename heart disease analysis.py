# -*- coding: utf-8 -*-
"""Heart attack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bwj-CB3xhWJt_-e0cy0j2DMMoLE9g7oX
"""

import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data_heart = pd.read_csv('/content/Heart_Disease_Prediction.csv')
data_heart.head()

data_heart.isnull().sum()

data_heart.describe()

plt.figure(figsize=(12, 12))
correlation = data_heart.corr()
sns.heatmap(correlation, xticklabels=correlation.columns, yticklabels=correlation.columns, annot=True)

def draw_jointplot(data):
    grid = sns.PairGrid(data.dropna())
    grid.map_diag(sns.histplot, bins=40, kde=True)
    grid.map_lower(sns.regplot)
    grid.map_upper(sns.kdeplot)

data_heart.hist(figsize = (20, 20),color='green')
plt.show()

plt.figure(figsize=(10, 5))
plt.hist(data_heart['Heart Disease'])
plt.show()

plt.figure(figsize=(20,10))
sns.countplot(x=data_heart["Age"])
plt.title('Patients age count',fontsize=20)
plt.xlabel('Age',fontsize=20)
plt.ylabel('Count',fontsize=20)
plt.show()

target = data_heart['Heart Disease']
data = data_heart.drop('Heart Disease', axis=1)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

scaler = StandardScaler()

scaled_array = scaler.fit_transform(data)
scaled_array

X_train, X_test, y_train, y_test = train_test_split(data, target, random_state = 12, test_size = 0.25)

print("X_train: {}".format(X_train.shape))
print("X_test: {}".format(X_test.shape))
print("y_train: {}".format(y_train.shape))
print("y_test: {}".format(y_test.shape))

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix

log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

print(f"Train score: {log_reg.score(X_train, y_train)}")
print(f"Test score: {log_reg.score(X_test, y_test)}")

y_pred = log_reg.predict(X_test)
cm = confusion_matrix(y_test,y_pred)
conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])
plt.figure(figsize = (8,5))
sns.heatmap(conf_matrix, annot=True,fmt='d')

from sklearn.tree import DecisionTreeClassifier

tree = DecisionTreeClassifier(max_depth=4, max_leaf_nodes=7)
tree.fit(X_train, y_train)

print(f"Train score: {tree.score(X_train, y_train)}")
print(f"Test score: {tree.score(X_test, y_test)}")

print(f"Train ROC-AUC: {roc_auc_score(y_train, tree.predict_proba(X_train)[:, 1])}")
print(f"Test ROC-AUC: {roc_auc_score(y_test, tree.predict_proba(X_test)[:, 1])}")

y_pred = tree.predict(X_test)
cm = confusion_matrix(y_test,y_pred)
conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])
plt.figure(figsize = (8,5))
sns.heatmap(conf_matrix, annot=True,fmt='d')

